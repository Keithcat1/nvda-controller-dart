// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Safe bindings to the Windows NVDA screen reader controller, allowing text to be spoken and a few other operations
class NvdaControllerApi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NvdaControllerApi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NvdaControllerApi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int nvdaController_testIfRunning() {
    return _nvdaController_testIfRunning();
  }

  late final _nvdaController_testIfRunningPtr =
      _lookup<ffi.NativeFunction<error_status_t Function()>>(
          'nvdaController_testIfRunning');
  late final _nvdaController_testIfRunning =
      _nvdaController_testIfRunningPtr.asFunction<int Function()>(isLeaf: true);

  int nvdaController_speakText(
    ffi.Pointer<wchar_t> text,
  ) {
    return _nvdaController_speakText(
      text,
    );
  }

  late final _nvdaController_speakTextPtr = _lookup<
          ffi.NativeFunction<error_status_t Function(ffi.Pointer<wchar_t>)>>(
      'nvdaController_speakText');
  late final _nvdaController_speakText = _nvdaController_speakTextPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>)>(isLeaf: true);

  int nvdaController_cancelSpeech() {
    return _nvdaController_cancelSpeech();
  }

  late final _nvdaController_cancelSpeechPtr =
      _lookup<ffi.NativeFunction<error_status_t Function()>>(
          'nvdaController_cancelSpeech');
  late final _nvdaController_cancelSpeech =
      _nvdaController_cancelSpeechPtr.asFunction<int Function()>(isLeaf: true);

  int nvdaController_brailleMessage(
    ffi.Pointer<wchar_t> message,
  ) {
    return _nvdaController_brailleMessage(
      message,
    );
  }

  late final _nvdaController_brailleMessagePtr = _lookup<
          ffi.NativeFunction<error_status_t Function(ffi.Pointer<wchar_t>)>>(
      'nvdaController_brailleMessage');
  late final _nvdaController_brailleMessage = _nvdaController_brailleMessagePtr
      .asFunction<int Function(ffi.Pointer<wchar_t>)>(isLeaf: true);

  late final ffi.Pointer<handle_t> _nvdaControllerBindingHandle =
      _lookup<handle_t>('nvdaControllerBindingHandle');

  handle_t get nvdaControllerBindingHandle =>
      _nvdaControllerBindingHandle.value;

  set nvdaControllerBindingHandle(handle_t value) =>
      _nvdaControllerBindingHandle.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      _nvdaController_NvdaController_v1_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('nvdaController_NvdaController_v1_0_c_ifspec');

  RPC_IF_HANDLE get nvdaController_NvdaController_v1_0_c_ifspec =>
      _nvdaController_NvdaController_v1_0_c_ifspec.value;

  set nvdaController_NvdaController_v1_0_c_ifspec(RPC_IF_HANDLE value) =>
      _nvdaController_NvdaController_v1_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _NvdaController_v1_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('NvdaController_v1_0_c_ifspec');

  RPC_IF_HANDLE get NvdaController_v1_0_c_ifspec =>
      _NvdaController_v1_0_c_ifspec.value;

  set NvdaController_v1_0_c_ifspec(RPC_IF_HANDLE value) =>
      _NvdaController_v1_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      _nvdaController_NvdaController_v1_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('nvdaController_NvdaController_v1_0_s_ifspec');

  RPC_IF_HANDLE get nvdaController_NvdaController_v1_0_s_ifspec =>
      _nvdaController_NvdaController_v1_0_s_ifspec.value;

  set nvdaController_NvdaController_v1_0_s_ifspec(RPC_IF_HANDLE value) =>
      _nvdaController_NvdaController_v1_0_s_ifspec.value = value;
}

typedef error_status_t = ffi.Uint64;
typedef wchar_t = ffi.Uint16;
typedef handle_t = RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE = I_RPC_HANDLE;
typedef I_RPC_HANDLE = ffi.Pointer<ffi.Void>;
typedef RPC_IF_HANDLE = ffi.Pointer<ffi.Void>;

const int __REQUIRED_RPCNDR_H_VERSION__ = 475;
